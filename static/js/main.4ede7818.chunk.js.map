{"version":3,"sources":["Helper/Util.ts","Components/Common/Chip.tsx","Components/Dropdown/Dropdown.tsx","Components/Modal/Modal.tsx","Components/CustomInput/CustomInput.tsx","Components/Card/CardInfo/CardInfo.tsx","Components/Card/Card.tsx","Components/Board/Board.tsx","ApiMockData/dummyData.ts","Helper/APILayers.ts","Home/Dashboard.tsx","App.tsx","index.tsx"],"names":["formatDate","value","date","Date","getDate","getMonth","colorsList","Chip","props","item","removeLabel","style","backgroundColor","color","text","onClick","Dropdown","dropdownRef","useRef","handleClick","event","current","contains","target","onClose","useEffect","document","addEventListener","removeEventListener","ref","className","class","children","Modal","stopPropagation","CustomInput","onSubmit","displayClass","editClass","placeholder","defaultValue","buttonText","useState","isCustomInput","setIsCustomInput","inputText","setInputText","e","preventDefault","type","onChange","autoFocus","CardInfo","card","boardId","updateCard","selectedColor","setSelectedColor","cardValues","setCardValues","label","tempLabels","labels","filter","id","calculatedPercent","tasks","length","completed","calculatePercent","title","desc","min","toISOString","substr","map","index","findIndex","width","defaultChecked","Boolean","updateTask","checked","tempTasks","removeTask","task","now","Math","random","Card","removeCard","onDragEnd","onDragEnter","showDropdown","setShowDropdown","showModal","setShowModal","draggable","Board","board","addCard","removeBoard","cards","ApiMockResponse","LocalStorageKeyName","BoardAPI","a","apiData","BoardList","localStorage","getItem","localStorageData","JSON","parse","updateLocalStorageBoards","fetchBoardList","api","boards","setItem","stringify","Dashboard","setBoards","fetchData","cardId","targetCard","setTargetCard","addCardHandler","boardIndex","tempBoardsList","push","cardIndex","splice","sourceBoardIndex","sourceCardIndex","targetBoardIndex","targetCardIndex","sourceCard","name","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4ede7818.chunk.js","sourcesContent":["export const formatDate = (value: string) => {\n  if (!value) return \"\";\n  const date = new Date(value);\n  if (!date) return \"\";\n\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const day = date.getDate();\n  const month = months[date.getMonth()];\n  return day + \" \" + month;\n};\nexport const colorsList = [\n  \"#a8193d\",\n  \"#4fcc25\",\n  \"#1ebffa\",\n  \"#8da377\",\n  \"#9975bd\",\n  \"#cf61a1\",\n  \"#240959\",\n];\n","import React from \"react\";\nimport { X } from \"react-feather\";\nimport { ILabel } from \"../../Interfaces/Kanban\";\ninterface ChipProps {\n  item: ILabel;\n  removeLabel?: (label: ILabel) => void;\n}\nexport default function Chip(props: ChipProps) {\n  const { item, removeLabel } = props;\n  return (\n    <label style={{ backgroundColor: item.color, color: \"#fff\" }}>\n      {item.text}\n      {removeLabel && <X onClick={() => removeLabel(item)} />}\n    </label>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./Dropdown.css\";\n\nfunction Dropdown(props: any) {\n  const dropdownRef: any = useRef();\n\n  const handleClick = (event: any) => {\n    if (\n      dropdownRef &&\n      !dropdownRef.current?.contains(event.target) &&\n      props.onClose\n    )\n      props.onClose();\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  });\n\n  return (\n    <div\n      ref={dropdownRef}\n      className={`dropdown custom-scroll ${props.class ? props.class : \"\"}`}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport default Dropdown;\n","import React from \"react\";\n\nimport \"./Modal.css\";\n\nfunction Modal(props: any) {\n  return (\n    <div\n      className=\"modal\"\n      onClick={() => (props.onClose ? props.onClose() : \"\")}\n    >\n      <div\n        className=\"modal-content custom-scroll\"\n        onClick={(event) => event.stopPropagation()}\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\n\nimport { X } from \"react-feather\";\n\nimport \"./CustomInput.css\";\ninterface CustomInputProps {\n  text: string;\n  onSubmit: (value: string) => void;\n  displayClass?: string;\n  editClass?: string;\n  placeholder?: string;\n  defaultValue?: string;\n  buttonText?: string;\n}\nfunction CustomInput(props: CustomInputProps) {\n  const {\n    text,\n    onSubmit,\n    displayClass,\n    editClass,\n    placeholder,\n    defaultValue,\n    buttonText,\n  } = props;\n  const [isCustomInput, setIsCustomInput] = useState(false);\n  const [inputText, setInputText] = useState(defaultValue || \"\");\n\n  const submission = (e: any) => {\n    e.preventDefault();\n    if (inputText && onSubmit) {\n      setInputText(\"\");\n      onSubmit(inputText);\n    }\n    setIsCustomInput(false);\n  };\n\n  return (\n    <div className=\"custom-input\">\n      {isCustomInput ? (\n        <form\n          className={`custom-input-edit ${editClass ? editClass : \"\"}`}\n          onSubmit={submission}\n        >\n          <input\n            type=\"text\"\n            value={inputText}\n            placeholder={placeholder || text}\n            onChange={(event) => setInputText(event.target.value)}\n            autoFocus\n          />\n          <div className=\"custom-input-edit-footer\">\n            <button type=\"submit\">{buttonText || \"Add\"}</button>\n            <X onClick={() => setIsCustomInput(false)} className=\"closeIcon\" />\n          </div>\n        </form>\n      ) : (\n        <p\n          className={`custom-input-display ${displayClass ? displayClass : \"\"}`}\n          onClick={() => setIsCustomInput(true)}\n        >\n          {text}\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default CustomInput;\n","import React, { useEffect, useState } from \"react\";\nimport { Calendar, CheckSquare, List, Tag, Trash, Type } from \"react-feather\";\nimport { colorsList } from \"../../../Helper/Util\";\nimport Modal from \"../../Modal/Modal\";\nimport CustomInput from \"../../CustomInput/CustomInput\";\n\nimport \"./CardInfo.css\";\nimport { ICard, ILabel, ITask } from \"../../../Interfaces/Kanban\";\nimport Chip from \"../../Common/Chip\";\ninterface CardInfoProps {\n  onClose: () => void;\n  card: ICard;\n  boardId: number;\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\n}\nfunction CardInfo(props: CardInfoProps) {\n  const { onClose, card, boardId, updateCard } = props;\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [cardValues, setCardValues] = useState<ICard>({\n    ...card,\n  });\n\n  const updateTitle = (value: string) => {\n    setCardValues({ ...cardValues, title: value });\n  };\n\n  const updateDesc = (value: string) => {\n    setCardValues({ ...cardValues, desc: value });\n  };\n\n  const addLabel = (label: ILabel) => {\n    const index = cardValues.labels.findIndex(\n      (item) => item.text === label.text,\n    );\n    if (index > -1) return; //if label text already exist then return\n\n    setSelectedColor(\"\");\n    setCardValues({\n      ...cardValues,\n      labels: [...cardValues.labels, label],\n    });\n  };\n\n  const removeLabel = (label: ILabel) => {\n    const tempLabels = cardValues.labels.filter(\n      (item) => item.text !== label.text,\n    );\n\n    setCardValues({\n      ...cardValues,\n      labels: tempLabels,\n    });\n  };\n\n  const addTask = (value: string) => {\n    const task: ITask = {\n      id: Date.now() + Math.random() * 2,\n      completed: false,\n      text: value,\n    };\n    setCardValues({\n      ...cardValues,\n      tasks: [...cardValues.tasks, task],\n    });\n  };\n\n  const removeTask = (id: number) => {\n    const tasks = [...cardValues.tasks];\n\n    const tempTasks = tasks.filter((item) => item.id !== id);\n    setCardValues({\n      ...cardValues,\n      tasks: tempTasks,\n    });\n  };\n\n  const updateTask = (id: number, value: boolean) => {\n    const tasks = [...cardValues.tasks];\n\n    const index = tasks.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    tasks[index].completed = Boolean(value);\n\n    setCardValues({\n      ...cardValues,\n      tasks,\n    });\n  };\n\n  const calculatePercent = () => {\n    if (!cardValues.tasks?.length) return 0;\n    const completed = cardValues.tasks?.filter(\n      (item) => item.completed,\n    )?.length;\n    return (completed / cardValues.tasks?.length) * 100;\n  };\n\n  const updateDate = (date: string) => {\n    if (!date) return;\n\n    setCardValues({\n      ...cardValues,\n      date,\n    });\n  };\n\n  useEffect(() => {\n    if (updateCard) updateCard(boardId, cardValues.id, cardValues);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cardValues]);\n\n  const calculatedPercent = calculatePercent();\n\n  return (\n    <Modal onClose={onClose}>\n      <div className=\"cardinfo\">\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <Type />\n            <p>Title</p>\n          </div>\n          <CustomInput\n            defaultValue={cardValues.title}\n            text={cardValues.title}\n            placeholder=\"Enter Title\"\n            onSubmit={updateTitle}\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <List />\n            <p>Description</p>\n          </div>\n          <CustomInput\n            defaultValue={cardValues.desc}\n            text={cardValues.desc || \"Add a Description\"}\n            placeholder=\"Enter description\"\n            onSubmit={updateDesc}\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <Calendar />\n            <p>Date</p>\n          </div>\n          <input\n            type=\"date\"\n            defaultValue={cardValues.date}\n            min={new Date().toISOString().substr(0, 10)}\n            onChange={(event) => updateDate(event.target.value)}\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <Tag />\n            <p>Labels</p>\n          </div>\n          <div className=\"cardinfo-box-labels\">\n            {cardValues.labels?.map((item, index) => (\n              <Chip key={index} item={item} removeLabel={removeLabel} />\n            ))}\n          </div>\n          <ul>\n            {colorsList.map((item, index) => (\n              <li\n                key={index}\n                style={{ backgroundColor: item }}\n                className={selectedColor === item ? \"li-active\" : \"\"}\n                onClick={() => setSelectedColor(item)}\n              />\n            ))}\n          </ul>\n          <CustomInput\n            text=\"Add Label\"\n            placeholder=\"Enter label text\"\n            onSubmit={(value: string) =>\n              addLabel({ color: selectedColor, text: value })\n            }\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <CheckSquare />\n            <p>Tasks</p>\n          </div>\n          <div className=\"cardinfo-box-progress-bar\">\n            <div\n              className=\"cardinfo-box-progress\"\n              style={{\n                width: `${calculatedPercent}%`,\n                backgroundColor: calculatedPercent === 100 ? \"limegreen\" : \"\",\n              }}\n            />\n          </div>\n          <div className=\"cardinfo-box-task-list\">\n            {cardValues.tasks?.map((item) => (\n              <div key={item.id} className=\"cardinfo-box-task-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={item.completed}\n                  onChange={(event) =>\n                    updateTask(item.id, event.target.checked)\n                  }\n                />\n                <p className={item.completed ? \"completed\" : \"\"}>{item.text}</p>\n                <Trash onClick={() => removeTask(item.id)} />\n              </div>\n            ))}\n          </div>\n          <CustomInput\n            text={\"Add a Task\"}\n            placeholder=\"Enter task\"\n            onSubmit={addTask}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default CardInfo;\n","import React, { useState } from \"react\";\nimport { AlignLeft, CheckSquare, Clock, MoreHorizontal } from \"react-feather\";\nimport { formatDate } from \"../../Helper/Util\";\nimport { ICard } from \"../../Interfaces/Kanban\";\nimport Chip from \"../Common/Chip\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nimport \"./Card.css\";\nimport CardInfo from \"./CardInfo/CardInfo\";\ninterface CardProps {\n  card: ICard;\n  boardId: number;\n  removeCard: (boardId: number, cardId: number) => void;\n  onDragEnd: (boardId: number, cardId: number) => void;\n  onDragEnter: (boardId: number, cardId: number) => void;\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\n}\nfunction Card(props: CardProps) {\n  const { card, boardId, removeCard, onDragEnd, onDragEnter, updateCard } =\n    props;\n  const { id, title, desc, date, tasks, labels } = card;\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      {showModal && (\n        <CardInfo\n          onClose={() => setShowModal(false)}\n          card={card}\n          boardId={boardId}\n          updateCard={updateCard}\n        />\n      )}\n      <div\n        className=\"card\"\n        key={card.id}\n        draggable\n        onDragEnd={() => onDragEnd(boardId, id)}\n        onDragEnter={() => onDragEnter(boardId, id)}\n        onClick={() => setShowModal(true)}\n      >\n        <div className=\"card-top\">\n          <div className=\"card-top-labels\">\n            {labels?.map((item, index) => (\n              <Chip key={index} item={item} />\n            ))}\n          </div>\n          <div\n            className=\"card-top-more\"\n            onClick={(event) => {\n              event.stopPropagation();\n              setShowDropdown(true);\n            }}\n          >\n            <MoreHorizontal />\n            {showDropdown && (\n              <Dropdown\n                class=\"board-dropdown\"\n                onClose={() => setShowDropdown(false)}\n              >\n                <p onClick={() => removeCard(boardId, id)}>Delete Card</p>\n              </Dropdown>\n            )}\n          </div>\n        </div>\n        <div className=\"card-title\">{title}</div>\n        <div>\n          <p title={desc}>\n            <AlignLeft />\n          </p>\n        </div>\n        <div className=\"card-footer\">\n          {date && (\n            <p className=\"card-footer-item\">\n              <Clock className=\"card-footer-icon\" />\n              {formatDate(date)}\n            </p>\n          )}\n          {tasks && tasks?.length > 0 && (\n            <p className=\"card-footer-item\">\n              <CheckSquare className=\"card-footer-icon\" />\n              {tasks?.filter((item) => item.completed)?.length}/{tasks?.length}\n            </p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { MoreHorizontal } from \"react-feather\";\n\nimport Card from \"../Card/Card\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport CustomInput from \"../CustomInput/CustomInput\";\n\nimport \"./Board.css\";\nimport { IBoard, ICard } from \"../../Interfaces/Kanban\";\n\ninterface BoardProps {\n  board: IBoard;\n  addCard: (boardId: number, title: string) => void;\n  removeBoard: (boardId: number) => void;\n  removeCard: (boardId: number, cardId: number) => void;\n  onDragEnd: (boardId: number, cardId: number) => void;\n  onDragEnter: (boardId: number, cardId: number) => void;\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\n}\n\nfunction Board(props: BoardProps) {\n  const {\n    board,\n    addCard,\n    removeBoard,\n    removeCard,\n    onDragEnd,\n    onDragEnter,\n    updateCard,\n  } = props;\n  const [showDropdown, setShowDropdown] = useState(false);\n  return (\n    <div className=\"board\">\n      <div className=\"board-inner\" key={board?.id}>\n        <div className=\"board-header\">\n          <p className=\"board-header-title\">\n            {board?.title}\n            <span>{board?.cards?.length || 0}</span>\n          </p>\n          <div\n            className=\"board-header-title-more\"\n            onClick={() => setShowDropdown(true)}\n          >\n            <MoreHorizontal />\n            {showDropdown && (\n              <Dropdown\n                class=\"board-dropdown\"\n                onClose={() => setShowDropdown(false)}\n              >\n                <p onClick={() => removeBoard(board?.id)}>Delete Board</p>\n              </Dropdown>\n            )}\n          </div>\n        </div>\n        <div className=\"board-cards custom-scroll\">\n          {board?.cards?.map((item) => (\n            <Card\n              key={item.id}\n              card={item}\n              boardId={board.id}\n              removeCard={removeCard}\n              onDragEnter={onDragEnter}\n              onDragEnd={onDragEnd}\n              updateCard={updateCard}\n            />\n          ))}\n          <CustomInput\n            text=\"+ Add Card\"\n            placeholder=\"Enter Card Title\"\n            displayClass=\"board-add-card\"\n            editClass=\"board-add-card-edit\"\n            onSubmit={(value: string) => addCard(board?.id, value)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import { IBoard } from \"../Interfaces/Kanban\";\n\nexport const ApiMockResponse: IBoard[] = [\n  {\n    id: 1651319512266.7095,\n    title: \"Discover\",\n    cards: [\n      {\n        id: 1651319552926.0933,\n        title: \"Task1\",\n        labels: [{ color: \"#cf61a1\", text: \"Urgent\" }],\n        date: \"2022-05-05\",\n        tasks: [\n          { id: 1651319625559.8025, completed: true, text: \"Task1_subtask1\" },\n          { id: 1651319629650.8945, completed: true, text: \"Task1_subtask2\" },\n          { id: 1651319633774.9905, completed: true, text: \"Task1_subtask3\" },\n        ],\n        desc: \"Task1 Detail Description\",\n      },\n      {\n        id: 1651319568365.593,\n        title: \"Task2\",\n        labels: [{ color: \"#1ebffa\", text: \"Frontend\" }],\n        date: \"\",\n        tasks: [],\n      },\n    ],\n  },\n  {\n    id: 1651319523126.113,\n    title: \"Doing\",\n    cards: [\n      {\n        id: 1651319672685.5078,\n        title: \"Task3\",\n        labels: [{ color: \"#9975bd\", text: \"Database\" }],\n        date: \"\",\n        tasks: [\n          { id: 1651319728301.3855, completed: false, text: \"restore db\" },\n        ],\n      },\n    ],\n  },\n  {\n    id: 1651319530017.122,\n    title: \"In-Review\",\n    cards: [\n      {\n        id: 1651319677070.0732,\n        title: \"Task4\",\n        labels: [{ color: \"#8da377\", text: \"figma\" }],\n        date: \"2022-05-06\",\n        tasks: [],\n      },\n    ],\n  },\n  {\n    id: 1651319535931.4182,\n    title: \"Completed\",\n    cards: [\n      {\n        id: 1651319680948.0479,\n        title: \"Task5\",\n        labels: [{ color: \"#4fcc25\", text: \"Payment API\" }],\n        date: \"2022-05-04\",\n        tasks: [\n          { id: 1651319820180.9648, completed: false, text: \"GraphQl\" },\n          { id: 1651319833779.3252, completed: true, text: \"Restful API\" },\n        ],\n      },\n    ],\n  },\n];\n","import { ApiMockResponse } from \"../ApiMockData/dummyData\";\nimport { IBoard } from \"../Interfaces/Kanban\";\n\nconst LocalStorageKeyName = \"kanban-boards\";\nexport class BoardAPI {\n  async fetchBoardList(): Promise<IBoard[]> {\n    const apiData: IBoard[] = ApiMockResponse;\n    let BoardList: IBoard[] = [];\n    // добавляем mock-данные, если local storage пуст\n    if (localStorage.getItem(LocalStorageKeyName)) {\n      const localStorageData: IBoard[] = JSON.parse(\n        localStorage.getItem(LocalStorageKeyName) ?? \"\",\n      );\n      BoardList = [...localStorageData];\n    } else {\n      BoardList = [...apiData];\n      updateLocalStorageBoards(BoardList);\n    }\n\n    return BoardList;\n  }\n}\n\nexport async function fetchBoardList(): Promise<IBoard[]> {\n  const api = new BoardAPI();\n  return api.fetchBoardList();\n}\nexport function updateLocalStorageBoards(boards: IBoard[]) {\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\n}\n","import React, { useEffect, useState } from \"react\";\nimport Board from \"../Components/Board/Board\";\nimport \"./Dashboard.css\";\nimport CustomInput from \"../Components/CustomInput/CustomInput\";\nimport { ICard, IBoard } from \"../Interfaces/Kanban\";\nimport { fetchBoardList, updateLocalStorageBoards } from \"../Helper/APILayers\";\n\nfunction Dashboard() {\n  const [boards, setBoards] = useState<IBoard[]>([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    const boards: IBoard[] = await fetchBoardList();\n    setBoards(boards);\n  }\n  const [targetCard, setTargetCard] = useState({\n    boardId: 0,\n    cardId: 0,\n  });\n\n  const addboardHandler = (name: string) => {\n    const tempBoardsList = [...boards];\n    tempBoardsList.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeBoard = (boardId: number) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    tempBoardsList.splice(boardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const addCardHandler = (boardId: number, title: string) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    tempBoardsList[boardIndex].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title,\n      labels: [],\n      date: \"\",\n      tasks: [],\n      desc: \"\",\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeCard = (boardId: number, cardId: number) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const updateCard = (boardId: number, cardId: number, card: ICard) => {\n    const boardIndex = boards.findIndex((item) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\n    if (cardIndex < 0) return;\n\n    tempBoardsList[boardIndex].cards[cardIndex] = card;\n\n    setBoards(tempBoardsList);\n  };\n\n  const onDragEnd = (boardId: number, cardId: number) => {\n    const sourceBoardIndex = boards.findIndex(\n      (item: IBoard) => item.id === boardId,\n    );\n    if (sourceBoardIndex < 0) return;\n\n    const sourceCardIndex = boards[sourceBoardIndex]?.cards?.findIndex(\n      (item) => item.id === cardId,\n    );\n    if (sourceCardIndex < 0) return;\n\n    const targetBoardIndex = boards.findIndex(\n      (item: IBoard) => item.id === targetCard.boardId,\n    );\n    if (targetBoardIndex < 0) return;\n\n    const targetCardIndex = boards[targetBoardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cardId,\n    );\n    if (targetCardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const sourceCard = tempBoardsList[sourceBoardIndex].cards[sourceCardIndex];\n    tempBoardsList[sourceBoardIndex].cards.splice(sourceCardIndex, 1);\n    tempBoardsList[targetBoardIndex].cards.splice(\n      targetCardIndex,\n      0,\n      sourceCard,\n    );\n    setBoards(tempBoardsList);\n\n    setTargetCard({\n      boardId: 0,\n      cardId: 0,\n    });\n  };\n\n  const onDragEnter = (boardId: number, cardId: number) => {\n    if (targetCard.cardId === cardId) return;\n    setTargetCard({\n      boardId: boardId,\n      cardId: cardId,\n    });\n  };\n\n  useEffect(() => {\n    updateLocalStorageBoards(boards);\n  }, [boards]);\n  return (\n    <div className=\"app\">\n      <div className=\"app-nav\">\n        <h1>Еще одна Kanban - доска</h1>\n      </div>\n      <div className=\"app-boards-container\">\n        <div className=\"app-boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              onDragEnd={onDragEnd}\n              onDragEnter={onDragEnter}\n              updateCard={updateCard}\n            />\n          ))}\n          <div className=\"app-boards-last\">\n            <CustomInput\n              displayClass=\"app-boards-add-board\"\n              editClass=\"app-boards-add-board-edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import Dashboard from \"./Home/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}